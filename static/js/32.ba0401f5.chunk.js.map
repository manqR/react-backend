{"version":3,"sources":["Auth/actions.js","views/master/item/stock_opname.js"],"names":["BASE_URL","Index","props","serialize","obj","str","p","hasOwnProperty","push","encodeURIComponent","join","state","period","loading","id","axios","method","proxyHeaders","credentials","headers","getToken","data","this","itemCode","then","response","getListData","catch","error","setState","errorMsg","URL","fetch","Headers","json","results","console","log","mounted","items","fields","key","_style","width","columnFilter","tableFilter","itemsPerPage","hover","sorter","scopedSlots","item","className","value","ITEM_CODE","checked","OPNAME","onChange","checkBoxChanged","shape","color","Component"],"mappings":"6KACI,kCAGO,IAAMA,EAAU,kC,kNCSNC,E,kDAChB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAmCTC,UAAY,SAAAC,GACV,IAAIC,EAAM,GACV,IAAK,IAAIC,KAAKF,EACRA,EAAIG,eAAeD,IACrBD,EAAIG,KAAKC,mBAAmBH,GAAK,IAAMG,mBAAmBL,EAAIE,KAElE,OAAOD,EAAIK,KAAK,MAxCf,EAAKC,MAAQ,CACTC,OAAQ,GACRC,SAAS,GAJE,E,mDAQnB,SAAgBC,GAAK,IAAD,OAEjBC,IAAM,GAAD,OAAIf,IAAJ,uBAAmC,CACpCgB,OAAQ,OACRC,cAAc,EACdC,aAAa,EACbC,QAAS,CACC,iBAAiBC,cACjB,eAAgB,oCAChB,OAAU,oBAEpBC,KAAMC,KAAKnB,UAAU,CACjBoB,SAAUT,MAEfU,MAAK,SAAAC,GAEL,EAAKC,iBAELC,OAAM,SAAAC,GACL,EAAKC,SAAS,CACVC,UAAS,S,yBAkBnB,WAAc,IAAD,OACLC,EAAG,UAAM/B,IAAN,qBACTgC,MAAMD,EAAK,CACPf,OAAQ,OACRG,QAAS,IAAIc,QAAQ,CACrB,iBAAiBb,cACjB,eAAgB,oCAChB,OAAU,uBAGbI,MAAK,SAAAC,GAAQ,OAAIA,EAASS,UAC1BV,MAAK,SAAAU,GACF,EAAKL,SAAS,CAAER,KAAMa,EAAKC,UAC3BC,QAAQC,IAAI,EAAK1B,MAAMU,W,+BAI9B,WACGC,KAAKgB,SAAU,EACfhB,KAAKI,gB,kCAIT,WACIJ,KAAKgB,SAAU,I,oBAGnB,WAAU,IAAD,OAWJ,OACG,cAAC,IAAD,CACAC,MAAOjB,KAAKX,MAAMU,KAClBmB,OAbW,CACX,CAAEC,IAAK,gBAAiBC,OAAQ,CAAEC,MAAO,QACzC,CAAEF,IAAK,cAAeC,OAAQ,CAAEC,MAAO,QACvC,CAAEF,IAAK,YAAaC,OAAQ,CAAEC,MAAO,QACrC,CAAEF,IAAK,mBAAoBC,OAAQ,CAAEC,MAAO,QAC5C,CAAEF,IAAK,oBAAqBC,OAAQ,CAAEC,MAAO,QAC7C,CAAEF,IAAK,SAAUC,OAAQ,CAAEC,MAAO,SAQlCC,cAAY,EACZC,aAAW,EACXC,aAAc,IACdC,OAAK,EACLC,QAAM,EACNC,YAAe,CACb,OACE,SAACC,GAAD,OAEE,6BACE,cAAC,KAAD,CAASC,UAAW,eAAgBC,MAAOF,EAAKG,UAAYC,QAA0B,IAAhBJ,EAAKK,OAA8BC,SAAW,kBAAM,EAAKC,gBAAgBP,EAAKG,YAAaK,MAAO,OAAQC,MAAO,sB,GAnGxKC","file":"static/js/32.ba0401f5.chunk.js","sourcesContent":["\r\n    // DEVELOPMENT\r\n    // export const BASE_URL = \"http://localhost:3000/api\";    \r\n    // // PRODUCTION\r\n    export const BASE_URL =\"http://52.221.199.238:3000/api\";\r\n   \r\n","import \"../../../css/dataTables.bootstrap4.css\";\r\nimport React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport {getToken} from '../../../Auth/common'\r\nimport {BASE_URL} from '../../../Auth/actions'\r\n\r\nimport {    \r\n    CDataTable,   \r\n    CSwitch,\r\n  } from '@coreui/react'\r\n\r\n\r\n\r\nexport default class Index extends Component {\r\n     constructor(props) {\r\n         super(props);\r\n         this.state = {\r\n             period: [],\r\n             loading: true,\r\n         };\r\n     }\r\n\r\n     checkBoxChanged(id) {\r\n        \r\n        axios(`${BASE_URL}/opnamestock/update`, {\r\n            method: \"POST\",\r\n            proxyHeaders: false,\r\n            credentials: true,        \r\n            headers: {              \r\n                      \"x-access-token\":getToken(),\r\n                      \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n                      \"Accept\": \"application/json\"                  \r\n            },\r\n            data: this.serialize({                  \r\n                itemCode: id                               \r\n            })\r\n        }).then(response => {\r\n         \r\n           this.getListData();\r\n                    \r\n        }).catch(error => {                         \r\n            this.setState({\r\n                errorMsg:true\r\n                \r\n            })\r\n        });\r\n      \r\n      }\r\n  \r\n  \r\n      serialize = obj => {\r\n        let str = [];\r\n        for (let p in obj)\r\n          if (obj.hasOwnProperty(p)) {\r\n            str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(obj[p]));\r\n          }\r\n        return str.join(\"&\");\r\n      };\r\n\r\n\r\n      getListData(){\r\n        const URL = `${BASE_URL}/opnamestock/list`; \r\n        fetch(URL, { \r\n            method: 'post', \r\n            headers: new Headers({\r\n            \"x-access-token\":getToken(),\r\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n            \"Accept\": \"application/json\"    \r\n            })       \r\n        })\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            this.setState({ data: json.results });       \r\n            console.log(this.state.data)\r\n        });     \r\n      }\r\n     // Keep as you have done\r\n     componentDidMount() {           \r\n        this.mounted = true; \r\n        this.getListData();\r\n    \r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.mounted = false;\r\n    }\r\n        \r\n    render() {\r\n        const fields = [\r\n            { key: 'RECORD_STATUS', _style: { width: '10%'} },\r\n            { key: 'BRANCH_CODE', _style: { width: '20%'} },        \r\n            { key: 'ITEM_NAME', _style: { width: '20%'} },\r\n            { key: 'CREATION_USER_ID', _style: { width: '20%'} },\r\n            { key: 'CREATION_DATETIME', _style: { width: '20%'} },\r\n            { key: 'Action', _style: { width: '10%'} },\r\n            \r\n        ]\r\n\r\n         return (\r\n            <CDataTable\r\n            items={this.state.data}\r\n            fields={fields}\r\n            columnFilter\r\n            tableFilter\r\n            itemsPerPage={1000}\r\n            hover\r\n            sorter\r\n            scopedSlots = {{\r\n              'Action':\r\n                (item)=>(\r\n                  \r\n                  <td>\r\n                    <CSwitch className={'mx-1 myCheck'} value={item.ITEM_CODE}  checked={ item.OPNAME === 1 ? true : false } onChange={ () => this.checkBoxChanged(item.ITEM_CODE) } shape={'pill'} color={'success'} />\r\n                  </td>\r\n                )\r\n            }}\r\n          />\r\n        )\r\n        \r\n     }\r\n}"],"sourceRoot":""}